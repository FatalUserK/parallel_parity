--map_width is subbed in here
local half_width = map_width * .5
local chunks  = {
--PIXEL SCENE APPEND!
}

--[[
local chunks = { --example structure
    ["0_0"] = {
        {
            path = "", --path to the pixel scene
            offsetx = 0, --offsetx within the chunk, ideally 0-511
            offsety = 0, --offsety within the chunk, ideally 0-511
        },
        {
            path = "mods/parallel_parity/files/autogenerated/kinda lame pixelscene.xml",
        },
    },
    ["-14_29"] = {
        {
            path = "mods/parallel_parity/files/autogenerated/todo: add pixel_scene name here.xml",
            offsetx = 22,
            offsety = 415,
        },
    },
}--]]



if init == nil then
    RegisterSpawnFunction( 0xffffeedd, "init" ) --holy shit i spent way too long debugging stupid shit until horscht reminded me i need to register spawn functions if they dont already exist am i stupid?? ðŸ˜­
end


if Parallel_Parity_InitOverridden then return end
Parallel_Parity_InitOverridden = true
Parallel_Parity_old_init = init

init = function( x, y, w, h)
    if Parallel_Parity_old_init then Parallel_Parity_old_init(x, y, w, h) end

    local chunk = {x = x/512, y = y/512} --get chunk coordinates

    chunk.x = ((chunk.x + half_width) % map_width) - half_width --code that relativises PWs (this is all you needed to do Nolla :devasted:)

    local chunk_table = chunks[chunk.x .. "_" .. chunk.y] --get chunk table
    local filename
    for str in string.gmatch(biome, "([^".."/".."]+)") do --i stole the gmatch string i still dont get string patterns ðŸ˜­
        filename = str
    end
    print(string.format("[%s_%s] at position (%s, %s) in %s", chunk.x, chunk.y, x, y, filename))
    if chunk_table then --if there is a chunk table
        print("HIT!")
        local marker = EntityLoad("data/entities/_debug/debug_marker.xml")
        local vsc = EntityAddComponent2(marker, "VariableStorageComponent")
        local desc = string.format("[%s_%s] at position (%s, %s) in %s", chunk.x, chunk.y, x, y, filename)
        for index, scene in ipairs(chunk_table) do --iterate over all pixel scenes in the table
            print("    loading scene: " .. scene.path)
            EntityLoad(scene.path, x + scene.offset.x + 256, y + scene.offset.y + 256) --load the pixel scene, add 256 to pos to place it in the rough centre of the chunk
            desc = desc .. "\n" .. scene.path
        end
        ComponentSetValue2(vsc, "value_string", desc)
    end
end